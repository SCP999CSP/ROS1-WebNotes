import{_ as a,c as n,o as i,af as e,aB as l}from"./chunks/framework.BYZYS_oT.js";const o=JSON.parse('{"title":"2.1.3 话题通信自定义msg","description":"","frontmatter":{},"headers":[],"relativePath":"Language/English/2.1.3 话题通信自定义msg.md","filePath":"Language/English/2.1.3 话题通信自定义msg.md"}'),p={name:"Language/English/2.1.3 话题通信自定义msg.md"};function t(g,s,h,r,d,c){return i(),n("div",null,[...s[0]||(s[0]=[e(`<h1 id="_2-1-3-话题通信自定义msg" tabindex="-1">2.1.3 话题通信自定义msg <a class="header-anchor" href="#_2-1-3-话题通信自定义msg" aria-label="Permalink to “2.1.3 话题通信自定义msg”">​</a></h1><p>在 ROS 通信协议中，数据载体是一个较为重要组成部分，ROS 中通过 std_msgs 封装了一些原生的数据类型,比如:String、Int32、Int64、Char、Bool、Empty.... 但是，这些数据一般只包含一个 data 字段，结构的单一意味着功能上的局限性，当传输一些复杂的数据，比如: 激光雷达的信息... std_msgs 由于描述性较差而显得力不从心，这种场景下可以使用自定义的消息类型</p><p>msgs只是简单的文本文件，每行具有字段类型和字段名称，可以使用的字段类型有：</p><ul><li>int8, int16, int32, int64 (或者无符号类型: uint*)</li><li>float32, float64</li><li>string</li><li>time, duration</li><li>other msg files</li><li>variable-length array[] and fixed-length array[C]</li></ul><p>ROS中还有一种特殊类型：<code>Header</code>，标头包含时间戳和ROS中常用的坐标帧信息。会经常看到msg文件的第一行具有<code>Header标头</code>。</p><hr><p><strong>需求:</strong>创建自定义消息，该消息包含人的信息:姓名、身高、年龄等。</p><p><strong>流程:</strong></p><ol><li>按照固定格式创建 msg 文件</li><li>编辑配置文件</li><li>编译生成可以被 Python 或 C++ 调用的中间文件</li></ol><h4 id="_1-定义msg文件" tabindex="-1">1.定义msg文件 <a class="header-anchor" href="#_1-定义msg文件" aria-label="Permalink to “1.定义msg文件”">​</a></h4><p>功能包下新建 msg 目录，添加文件 Person.msg</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>string name</span></span>
<span class="line"><span>uint16 age</span></span>
<span class="line"><span>float64 height</span></span></code></pre></div><h4 id="_2-编辑配置文件" tabindex="-1">2.编辑配置文件 <a class="header-anchor" href="#_2-编辑配置文件" aria-label="Permalink to “2.编辑配置文件”">​</a></h4><p><strong>package.xml</strong>中添加编译依赖与执行依赖</p><div class="language-xml"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build_depend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;message_generation&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">build_depend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">exec_depend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;message_runtime&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">exec_depend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  exce_depend 以前对应的是 run_depend 现在非法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  --&gt;</span></span></code></pre></div><p><strong>CMakeLists.txt</strong>编辑 msg 相关配置</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>find_package(catkin REQUIRED COMPONENTS</span></span>
<span class="line"><span>  roscpp</span></span>
<span class="line"><span>  rospy</span></span>
<span class="line"><span>  std_msgs</span></span>
<span class="line"><span>  message_generation</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span># 需要加入 message_generation,必须有 std_msgs</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>## 配置 msg 源文件</span></span>
<span class="line"><span>add_message_files(</span></span>
<span class="line"><span>  FILES</span></span>
<span class="line"><span>  Person.msg</span></span>
<span class="line"><span>)</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span># 生成消息时依赖于 std_msgs</span></span>
<span class="line"><span>generate_messages(</span></span>
<span class="line"><span>  DEPENDENCIES</span></span>
<span class="line"><span>  std_msgs</span></span>
<span class="line"><span>)</span></span></code></pre></div><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>#执行时依赖</span></span>
<span class="line"><span>catkin_package(</span></span>
<span class="line"><span>#  INCLUDE_DIRS include</span></span>
<span class="line"><span>#  LIBRARIES demo02_talker_listener</span></span>
<span class="line"><span>  CATKIN_DEPENDS roscpp rospy std_msgs message_runtime</span></span>
<span class="line"><span>#  DEPENDS system_lib</span></span>
<span class="line"><span>)</span></span></code></pre></div><h4 id="_3-编译" tabindex="-1">3.编译 <a class="header-anchor" href="#_3-编译" aria-label="Permalink to “3.编译”">​</a></h4><p><strong>编译后的中间文件查看:</strong></p><p>Python 需要调用的中间文件(.../工作空间/devel/lib/python3/dist-packages/包名/msg)</p><p><img src="`+l+'" alt="img"></p><p>后续调用相关 msg 时，是从这些中间文件调用的</p>',25)])])}const m=a(p,[["render",t]]);export{o as __pageData,m as default};
