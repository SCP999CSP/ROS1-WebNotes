import{_ as a,c as e,o as t,af as i,ao as o}from"./chunks/framework.D4kPR_Qw.js";const d=JSON.parse('{"title":"2.2 服务通信","description":"","frontmatter":{},"headers":[],"relativePath":"2.2 服务通信.md","filePath":"2.2 服务通信.md"}'),l={name:"2.2 服务通信.md"};function n(s,r,p,h,_,c){return t(),e("div",null,[...r[0]||(r[0]=[i('<h1 id="_2-2-服务通信" tabindex="-1">2.2 服务通信 <a class="header-anchor" href="#_2-2-服务通信" aria-label="Permalink to “2.2 服务通信”">​</a></h1><p>服务通信也是ROS中一种极其常用的通信模式，服务通信是基于<strong>请求响应</strong>模式的，是一种应答机制。也即: 一个节点A向另一个节点B发送请求，B接收处理请求并产生响应结果返回给A。比如如下场景:</p><blockquote><p>机器人巡逻过程中，控制系统分析传感器数据发现可疑物体或人... 此时需要拍摄照片并留存。</p></blockquote><p>在上述场景中，就使用到了服务通信。</p><ul><li>一个节点需要向相机节点发送拍照请求，相机节点处理请求，并返回处理结果</li></ul><p>与上述应用类似的，服务通信更适用于对时时性有要求、具有一定逻辑处理的应用场景。</p><hr><h4 id="概念" tabindex="-1"><strong>概念</strong> <a class="header-anchor" href="#概念" aria-label="Permalink to “概念”">​</a></h4><p>以请求响应的方式实现不同节点之间数据交互的通信模式。</p><h4 id="作用" tabindex="-1"><strong>作用</strong> <a class="header-anchor" href="#作用" aria-label="Permalink to “作用”">​</a></h4><p>用于偶然的、对时时性有要求、有一定逻辑处理需求的数据传输场景。</p><h4 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-label="Permalink to “案例”">​</a></h4><p>实现两个数字的求和，客户端节点，运行会向服务器发送两个数字，服务器端节点接收两个数字求和并将结果响应回客户端。</p><p><img src="'+o+'" alt="img"></p><hr><p><strong>另请参考:</strong></p><ul><li><a href="http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv" target="_blank" rel="noreferrer">http://wiki.ros.org/ROS/Tutorials/CreatingMsgAndSrv</a></li><li><a href="http://wiki.ros.org/ROS/Tutorials/WritingServiceClient(c%2B%2B)" target="_blank" rel="noreferrer">http://wiki.ros.org/ROS/Tutorials/WritingServiceClient%28c%2B%2B%29</a></li><li><a href="http://wiki.ros.org/ROS/Tutorials/WritingServiceClient(python)" target="_blank" rel="noreferrer">http://wiki.ros.org/ROS/Tutorials/WritingServiceClient%28python%29</a></li></ul>',17)])])}const f=a(l,[["render",n]]);export{d as __pageData,f as default};
