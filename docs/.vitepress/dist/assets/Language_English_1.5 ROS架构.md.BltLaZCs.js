import{_ as i,c as a,o as e,af as l}from"./chunks/framework.BYZYS_oT.js";const h=JSON.parse('{"title":"1.5 ROS架构","description":"","frontmatter":{},"headers":[],"relativePath":"Language/English/1.5 ROS架构.md","filePath":"Language/English/1.5 ROS架构.md"}'),t={name:"Language/English/1.5 ROS架构.md"};function s(o,r,n,p,S,O){return e(),a("div",null,[...r[0]||(r[0]=[l('<h1 id="_1-5-ros架构" tabindex="-1">1.5 ROS架构 <a class="header-anchor" href="#_1-5-ros架构" aria-label="Permalink to “1.5 ROS架构”">​</a></h1><p>到目前为止，我们已经安装了ROS，运行了ROS中内置的小乌龟案例，并且也编写了ROS小程序，对ROS也有了一个大概的认知，当然这个认知可能还是比较模糊并不清晰的，接下来，我们要从宏观上来介绍一下ROS的架构设计。</p><p>立足不同的角度，对ROS架构的描述也是不同的，一般我们可以从设计者、维护者、系统结构与自身结构4个角度来描述ROS结构:</p><h4 id="_1-设计者" tabindex="-1">1.设计者 <a class="header-anchor" href="#_1-设计者" aria-label="Permalink to “1.设计者”">​</a></h4><p>ROS<strong>设计者</strong>将ROS表述为“ROS = Plumbing + Tools + Capabilities + Ecosystem”</p><ul><li>Plumbing: <strong>通讯机制(实现ROS不同节点之间的交互)</strong></li><li>Tools :<strong>工具软件包(ROS中的开发和调试工具)</strong></li><li>Capabilities :机器人高层技能(ROS中某些功能的集合，比如:导航)</li><li>Ecosystem:机器人生态系统(跨地域、跨软件与硬件的ROS联盟)</li></ul><h4 id="_2-维护者" tabindex="-1">2.维护者 <a class="header-anchor" href="#_2-维护者" aria-label="Permalink to “2.维护者”">​</a></h4><p>立足<strong>维护者</strong>的角度: ROS 架构可划分为两大部分</p><ul><li>main：核心部分，主要由Willow Garage 和一些开发者设计、提供以及维护。它提供了一些分布式计算的基本工具，以及整个ROS的核心部分的程序编写。</li><li>universe：全球范围的代码，有不同国家的ROS社区组织开发和维护。一种是库的代码，如OpenCV、PCL等；库的上一层是从功能角度提供的代码，如人脸识别，他们调用下层的库；最上层的代码是应用级的代码，让机器人完成某一确定的功能。</li></ul><h4 id="_3-系统架构" tabindex="-1">3.系统架构 <a class="header-anchor" href="#_3-系统架构" aria-label="Permalink to “3.系统架构”">​</a></h4><p>立足系统架构: ROS 可以划分为三层</p><ul><li><p>OS 层，也即经典意义的操作系统</p><p>ROS 只是元操作系统，需要依托真正意义的操作系统，目前兼容性最好的是 Linux 的 Ubuntu，Mac、Windows 也支持 ROS 的较新版本</p></li><li><p>中间层</p><p>是 ROS 封装的关于机器人开发的中间件，比如:</p><ul><li>基于 TCP/UDP 继续封装的 TCPROS/UDPROS 通信系统</li><li>用于进程间通信 Nodelet，为数据的实时性传输提供支持</li><li>另外，还提供了大量的机器人开发实现库，如：数据类型定义、坐标变换、运动控制....</li></ul></li><li><p>应用层</p><p>功能包，以及功能包内的节点，比如: master、turtlesim的控制与运动节点...</p></li></ul><h4 id="_4-自身结构" tabindex="-1">4.自身结构 <a class="header-anchor" href="#_4-自身结构" aria-label="Permalink to “4.自身结构”">​</a></h4><p>就 ROS 自身实现而言: 也可以划分为三层</p><ul><li><p>文件系统</p><p>ROS文件系统级指的是在硬盘上面查看的ROS源代码的组织形式</p></li><li><p>计算图</p><p>ROS 分布式系统中不同进程需要进行数据交互，计算图可以以点对点的网络形式表现数据交互过程，计算图中的重要概念: 节点(Node)、消息(message)、通信机制_主题(topic)、通信机制_服务(service)</p></li><li><p>开源社区</p><p>ROS的社区级概念是ROS网络上进行代码发布的一种表现形式</p><ul><li>发行版（Distribution）　ROS发行版是可以独立安装、带有版本号的一系列综合功能包。ROS发行版像Linux发行版一样发挥类似的作用。这使得ROS软件安装更加容易，而且能够通过一个软件集合维持一致的版本。</li><li>软件库（Repository）　ROS依赖于共享开源代码与软件库的网站或主机服务，在这里不同的机构能够发布和分享各自的机器人软件与程序。</li><li>ROS维基（ROS Wiki）　ROS Wiki是用于记录有关ROS系统信息的主要论坛。任何人都可以注册账户、贡献自己的文件、提供更正或更新、编写教程以及其他行为。网址是<a href="http://wiki.ros.org/%E3%80%82" target="_blank" rel="noreferrer">http://wiki.ros.org/。</a></li><li>Bug提交系统（Bug Ticket System）如果你发现问题或者想提出一个新功能，ROS提供这个资源去做这些。</li><li>邮件列表（Mailing list）　ROS用户邮件列表是关于ROS的主要交流渠道，能够像论坛一样交流从ROS软件更新到ROS软件使用中的各种疑问或信息。网址是<a href="http://lists.ros.org/%E3%80%82" target="_blank" rel="noreferrer">http://lists.ros.org/。</a></li><li>ROS问答（ROS Answer）用户可以使用这个资源去提问题。网址是<a href="https://answers.ros.org/questions/%E3%80%82" target="_blank" rel="noreferrer">https://answers.ros.org/questions/。</a></li><li>博客（Blog）你可以看到定期更新、照片和新闻。网址是<a href="https://www.ros.org/news/%EF%BC%8C%E4%B8%8D%E8%BF%87%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F%E5%B7%B2%E7%BB%8F%E9%80%80%E4%BC%91%EF%BC%8CROS%E7%A4%BE%E5%8C%BA%E5%8F%96%E8%80%8C%E4%BB%A3%E4%B9%8B%EF%BC%8C%E7%BD%91%E5%9D%80%E6%98%AFhttps://discourse.ros.org/%E3%80%82" target="_blank" rel="noreferrer">https://www.ros.org/news/，不过博客系统已经退休，ROS社区取而代之，网址是https://discourse.ros.org/。</a></li></ul></li></ul><p>现在处于学习的初级阶段，只是运行了ROS的内置案例，编写了简单的ROS实现，因此，受限于当前进度，不会详细介绍所有设计架构中的所有模块，当前只介绍文件系统与计算图，下一章会介绍 ROS 的通信机制，这也是ROS的核心实现之一。</p><p><a href="http://www.autolabor.com.cn/book/ROSTutorials/chapter1/14-ros-ji-cheng-kai-fa-huan-jing-da-jian/143-launchwen-jian-yan-shi.html" target="_blank" rel="noreferrer"></a></p>',17)])])}const g=i(t,[["render",s]]);export{h as __pageData,g as default};
