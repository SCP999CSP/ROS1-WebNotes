import{_ as i,c as a,o as n,af as l,aK as p}from"./chunks/framework.CZgp8l78.js";const o=JSON.parse('{"title":"2.5.2 实操02_话题订阅","description":"","frontmatter":{},"headers":[],"relativePath":"2.5.2 实操02_话题订阅.md","filePath":"2.5.2 实操02_话题订阅.md"}'),t={name:"2.5.2 实操02_话题订阅.md"};function h(k,s,e,r,d,g){return n(),a("div",null,[...s[0]||(s[0]=[l('<h1 id="_2-5-2-实操02-话题订阅" tabindex="-1">2.5.2 实操02_话题订阅 <a class="header-anchor" href="#_2-5-2-实操02-话题订阅" aria-label="Permalink to “2.5.2 实操02_话题订阅”">​</a></h1><p><strong>需求描述:</strong> 已知turtlesim中的乌龟显示节点，会发布当前乌龟的位姿(窗体中乌龟的坐标以及朝向)，要求控制乌龟运动，并时时打印当前乌龟的位姿。</p><p><strong>结果演示:</strong></p><p><img src="'+p+`" alt="img"></p><p><strong>实现分析:</strong></p><ol><li>首先，需要启动乌龟显示以及运动控制节点并控制乌龟运动。</li><li>要通过ROS命令，来获取乌龟位姿发布的话题以及消息。</li><li>编写订阅节点，订阅并打印乌龟的位姿。</li></ol><p><strong>实现流程:</strong></p><ol><li>通过ros命令获取话题与消息信息。</li><li>编码实现位姿获取节点。</li><li>启动 roscore、turtlesim_node 、控制节点以及位姿订阅节点，控制乌龟运动并输出乌龟的位姿。</li></ol><h4 id="_1-话题与消息获取" tabindex="-1">1.话题与消息获取 <a class="header-anchor" href="#_1-话题与消息获取" aria-label="Permalink to “1.话题与消息获取”">​</a></h4><p><strong>获取话题:</strong>/turtle1/pose</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>rostopic list</span></span></code></pre></div><p>**获取消息类型:**turtlesim/Pose</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>rostopic type  /turtle1/pose</span></span></code></pre></div><p><strong>获取消息格式:</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>rosmsg info turtlesim/Pose</span></span></code></pre></div><p><strong>响应结果:</strong></p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>float32 x</span></span>
<span class="line"><span>float32 y</span></span>
<span class="line"><span>float32 theta</span></span>
<span class="line"><span>float32 linear_velocity</span></span>
<span class="line"><span>float32 angular_velocity</span></span></code></pre></div><h4 id="_2-实现订阅节点" tabindex="-1">2.实现订阅节点 <a class="header-anchor" href="#_2-实现订阅节点" aria-label="Permalink to “2.实现订阅节点”">​</a></h4><p>创建功能包需要依赖的功能包: roscpp rospy std_msgs turtlesim</p><p><strong>实现方案A:</strong> C++</p><div class="language-cpp"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    订阅小乌龟的位姿: 时时获取小乌龟在窗体中的坐标并打印</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    准备工作:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        1.获取话题名称 /turtle1/pose</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        2.获取消息类型 turtlesim/Pose</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        3.运行前启动 turtlesim_node 与 turtle_teleop_key 节点</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    实现流程:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        1.包含头文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        2.初始化 ROS 节点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        3.创建 ROS 句柄</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        4.创建订阅者对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        5.回调函数处理订阅的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        6.spin</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ros/ros.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;turtlesim/Pose.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doPose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> turtlesim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ConstPtr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ROS_INFO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;乌龟位姿信息:x=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,y=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,theta=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,lv=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,av=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        p-&gt;x,p-&gt;y,p-&gt;theta,p-&gt;linear_velocity,p-&gt;angular_velocity</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    );</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setlocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LC_ALL,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2.初始化 ROS 节点</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(argc,argv,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sub_pose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 3.创建 ROS 句柄</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::NodeHandle nh;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 4.创建订阅者对象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Subscriber sub </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nh.subscribe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">turtlesim</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::Pose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/turtle1/pose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,doPose);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 5.回调函数处理订阅的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 6.spin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ros</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>配置文件此处略</p><p><strong>实现方案B:</strong> Python</p><div class="language-py"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#! /usr/bin/env python</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    订阅小乌龟的位姿: 时时获取小乌龟在窗体中的坐标并打印</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    准备工作:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        1.获取话题名称 /turtle1/pose</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        2.获取消息类型 turtlesim/Pose</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        3.运行前启动 turtlesim_node 与 turtle_teleop_key 节点</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    实现流程:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        1.导包</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        2.初始化 ROS 节点</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        3.创建订阅者对象</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        4.回调函数处理订阅的数据</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        5.spin</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rospy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> turtlesim.msg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pose</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doPose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rospy.loginfo(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;乌龟坐标:x=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, y=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">,theta=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%.2f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,data.x,data.y,data.theta)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 2.初始化 ROS 节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rospy.init_node(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sub_pose_p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 3.创建订阅者对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sub </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rospy.Subscriber(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/turtle1/pose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,Pose,doPose,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">queue_size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #     4.回调函数处理订阅的数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #     5.spin</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rospy.spin()</span></span></code></pre></div><p>权限设置以及配置文件此处略</p><h4 id="_3-运行" tabindex="-1">3.运行 <a class="header-anchor" href="#_3-运行" aria-label="Permalink to “3.运行”">​</a></h4><p>首先，启动 roscore；</p><p>然后启动乌龟显示节点，执行运动控制节点；</p><p>最后启动乌龟位姿订阅节点；</p><p>最终执行结果与演示结果类似。</p>`,30)])])}const y=i(t,[["render",h]]);export{o as __pageData,y as default};
