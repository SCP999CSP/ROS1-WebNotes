import{_ as a,c as i,o as n,af as e}from"./chunks/framework.BYZYS_oT.js";const c=JSON.parse('{"title":"1.4.2 安装VScode","description":"","frontmatter":{},"headers":[],"relativePath":"Language/中文/1.4.2 安装VScode.md","filePath":"Language/中文/1.4.2 安装VScode.md"}'),t={name:"Language/中文/1.4.2 安装VScode.md"};function l(h,s,p,k,r,o){return n(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="_1-4-2-安装vscode" tabindex="-1">1.4.2 安装VScode <a class="header-anchor" href="#_1-4-2-安装vscode" aria-label="Permalink to “1.4.2 安装VScode”">​</a></h1><p>VSCode 全称 Visual Studio Code，是微软出的一款轻量级代码编辑器，免费、开源而且功能强大。它支持几乎所有主流的程序语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、Mac 以及 Linux。</p><h4 id="_1-下载" tabindex="-1">1.下载 <a class="header-anchor" href="#_1-下载" aria-label="Permalink to “1.下载”">​</a></h4><p>vscode 下载:<a href="https://code.visualstudio.com/docs?start=true" target="_blank" rel="noreferrer">https://code.visualstudio.com/docs?start=true</a></p><p>历史版本下载链接: <a href="https://code.visualstudio.com/updates" target="_blank" rel="noreferrer">https://code.visualstudio.com/updates</a></p><h4 id="_2-vscode-安装与卸载" tabindex="-1">2.VScode 安装与卸载 <a class="header-anchor" href="#_2-vscode-安装与卸载" aria-label="Permalink to “2.VScode 安装与卸载”">​</a></h4><h5 id="_2-1-安装" tabindex="-1">2.1 安装 <a class="header-anchor" href="#_2-1-安装" aria-label="Permalink to “2.1 安装”">​</a></h5><p><strong>方式1:</strong>双击安装即可(或右击选择安装)</p><p><strong>方式2:</strong><code>sudo dpkg -i xxxx.deb</code></p><h5 id="_2-2-卸载" tabindex="-1">2.2 卸载 <a class="header-anchor" href="#_2-2-卸载" aria-label="Permalink to “2.2 卸载”">​</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>sudo dpkg --purge  code</span></span></code></pre></div><h4 id="_3-vscode-集成-ros-插件" tabindex="-1">3.VScode 集成 ROS 插件 <a class="header-anchor" href="#_3-vscode-集成-ros-插件" aria-label="Permalink to “3.VScode 集成 ROS 插件”">​</a></h4><p>使用 VScode 开发 ROS 程序，需要先安装一些插件，常用插件如下:</p><p>![06vscode插件](file:///D:/ROS%E8%AF%BE%E7%A8%8B/ROS%E8%AE%B2%E4%B9%89_Noetic/ROS01_%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/img/06vscode%E6%8F%92%E4%BB%B6.PNG?lastModify=1594352429)</p><h4 id="_4-vscode-使用-基本配置" tabindex="-1">4.VScode 使用_基本配置 <a class="header-anchor" href="#_4-vscode-使用-基本配置" aria-label="Permalink to “4.VScode 使用_基本配置”">​</a></h4><h5 id="_4-1-创建-ros-工作空间" tabindex="-1">4.1 创建 ROS 工作空间 <a class="header-anchor" href="#_4-1-创建-ros-工作空间" aria-label="Permalink to “4.1 创建 ROS 工作空间”">​</a></h5><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>mkdir -p xxx_ws/src(必须得有 src)</span></span>
<span class="line"><span>cd xxx_ws</span></span>
<span class="line"><span>catkin_make</span></span></code></pre></div><h5 id="_4-2-启动-vscode" tabindex="-1">4.2 启动 VScode <a class="header-anchor" href="#_4-2-启动-vscode" aria-label="Permalink to “4.2 启动 VScode”">​</a></h5><p>进入 xxx_ws 启动 vscode</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>cd xxx_ws</span></span>
<span class="line"><span>code .</span></span></code></pre></div><h5 id="_4-3-vscode-中编译-ros" tabindex="-1">4.3 VScode 中编译 ros <a class="header-anchor" href="#_4-3-vscode-中编译-ros" aria-label="Permalink to “4.3 VScode 中编译 ros”">​</a></h5><p>快捷键 ctrl + shift + B 调用编译，选择:<code>catkin_make:build</code></p><p>可以点击配置设置为默认，修改.vscode/tasks.json 文件</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 有关 tasks.json 格式的文档，请参见</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // https://go.microsoft.com/fwlink/?LinkId=733558</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;tasks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;label&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;catkin_make:debug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//代表提示的描述性信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;shell&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//可以选择shell或者process,如果是shell代码是在shell里面运行一个命令，如果是process代表作为一个进程来运行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;command&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;catkin_make&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//这个是我们需要运行的命令</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果需要在命令后面加一些后缀，可以写在这里，比如-DCATKIN_WHITELIST_PACKAGES=“pac1;pac2”</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;group&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;kind&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;isDefault&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;presentation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                &quot;reveal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;always&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//可选always或者silence，代表是否输出信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;problemMatcher&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;$msCompile&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="_4-4-创建-ros-功能包" tabindex="-1">4.4 创建 ROS 功能包 <a class="header-anchor" href="#_4-4-创建-ros-功能包" aria-label="Permalink to “4.4 创建 ROS 功能包”">​</a></h5><p>选定 src 右击 ---&gt; create catkin package</p><p><strong>设置包名 添加依赖</strong></p><p>![07vscode_新建ROS包](file:///D:/ROS%E8%AF%BE%E7%A8%8B/ROS%E8%AE%B2%E4%B9%89_Noetic/ROS01_%E6%A6%82%E8%BF%B0%E4%B8%8E%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/img/07vscode_%E6%96%B0%E5%BB%BAROS%E5%8C%85.PNG?lastModify=1594352429)</p><h5 id="_4-5-python-实现" tabindex="-1">4.5 python 实现 <a class="header-anchor" href="#_4-5-python-实现" aria-label="Permalink to “4.5 python 实现”">​</a></h5><p>在 功能包 下新建 scripts 文件夹，添加 python 文件，<strong>并添加可执行权限</strong></p><div class="language-py"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#! /usr/bin/env python</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Python 版本的 HelloVScode，执行在控制台输出 HelloVScode</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    实现:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    1.导包</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2.初始化 ROS 节点</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    3.日志输出 HelloWorld</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rospy </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 1.导包</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;__main__&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rospy.init_node(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello_Vscode_p&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 2.初始化 ROS 节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rospy.loginfo(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello VScode, 我是 Python ....&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#3.日志输出 HelloWorld</span></span></code></pre></div><p>添加可执行权限 <code>chmode +x *.py</code></p><h5 id="_4-6-配置-cmakelists-txt" tabindex="-1">4.6 配置 CMakeLists.txt <a class="header-anchor" href="#_4-6-配置-cmakelists-txt" aria-label="Permalink to “4.6 配置 CMakeLists.txt”">​</a></h5><p>Python 配置:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>catkin_install_python(PROGRAMS scripts/自定义文件名.py</span></span>
<span class="line"><span>  DESTINATION \${CATKIN_PACKAGE_BIN_DESTINATION}</span></span>
<span class="line"><span>)</span></span></code></pre></div><h5 id="_4-7-编译执行" tabindex="-1">4.7 编译执行 <a class="header-anchor" href="#_4-7-编译执行" aria-label="Permalink to “4.7 编译执行”">​</a></h5><p>编译: ctrl + shift + B</p><p>执行: 和之前一致，只是可以在 VScode 中添加终端，首先执行:<code>source ./devel/setup.bash</code></p><p>PS:</p><p>如果不编译直接执行 python 文件，会抛出异常。</p><p>1.第一行解释器声明，可以使用绝对路径定位到 python3 的安装路径 #! /usr/bin/python3，但是不建议</p><p>2.建议使用 #!/usr/bin/env python 但是会抛出异常 : /usr/bin/env: “python”: 没有那个文件或目录</p><p>3.解决1: #!/usr/bin/env python3 直接使用 python3 但存在问题: 不兼容之前的 ROS 相关 python 实现</p><p>4.解决2: 创建一个链接符号到 python 命令:<code>sudo ln -s /usr/bin/python3 /usr/bin/python</code></p><h4 id="_5-其他-ide" tabindex="-1">5.其他 IDE <a class="header-anchor" href="#_5-其他-ide" aria-label="Permalink to “5.其他 IDE”">​</a></h4><p>ROS 开发可以使用的 IDE 还是比较多的，除了上述的 VScode，还有 Eclipse、QT、PyCharm、Roboware ....,详情可以参考官网介绍:<a href="http://wiki.ros.org/IDEs" target="_blank" rel="noreferrer">http://wiki.ros.org/IDEs</a></p><p>QT Creator Plugin for ROS，参考教程:<a href="https://ros-qtc-plugin.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">https://ros-qtc-plugin.readthedocs.io/en/latest/</a></p><p>Roboware 参考:<a href="http://www.roboware.me/#/" target="_blank" rel="noreferrer">http://www.roboware.me/#/</a>(PS: Roboware 已经停更了，可惜....)</p>`,48)])])}const E=a(t,[["render",l]]);export{c as __pageData,E as default};
