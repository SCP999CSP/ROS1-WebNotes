import{_ as a,c as p,o as i,af as r,ar as s,as as l,at as e,au as _}from"./chunks/framework.CZgp8l78.js";const R=JSON.parse('{"title":"第 2 章 ROS通信机制","description":"","frontmatter":{},"headers":[],"relativePath":"2 ROS通信机制.md","filePath":"2 ROS通信机制.md"}'),o={name:"2 ROS通信机制.md"};function n(m,t,S,c,d,g){return i(),p("div",null,[...t[0]||(t[0]=[r('<h1 id="第-2-章-ros通信机制" tabindex="-1">第 2 章 ROS通信机制 <a class="header-anchor" href="#第-2-章-ros通信机制" aria-label="Permalink to “第 2 章 ROS通信机制”">​</a></h1><p>机器人是一种高度复杂的系统性实现，在机器人上可能集成各种传感器(雷达、摄像头、GPS...)以及运动控制实现，为了解耦合，在ROS中每一个功能点都是一个单独的进程，每一个进程都是独立运行的。更确切的讲，<strong>ROS是进程（也称为</strong><em><strong>Nodes</strong></em><strong>）的分布式框架。</strong> 因为这些进程甚至还可分布于不同主机，不同主机协同工作，从而分散计算压力。不过随之也有一个问题: 不同的进程是如何通信的？也即不同进程间如何实现数据交换的？在此我们就需要介绍一下ROS中的通信机制了。</p><p>ROS 中的基本通信机制主要有如下三种实现策略:</p><ul><li>话题通信(发布订阅模式)</li><li>服务通信(请求响应模式)</li><li>参数服务器(参数共享模式)</li></ul><p>本章的主要内容就是是介绍各个通信机制的应用场景、理论模型、代码实现以及相关操作命令。本章预期达成学习目标如下:</p><ul><li>能够熟练介绍ROS中常用的通信机制</li><li>能够理解ROS中每种通信机制的理论模型</li><li>能够以代码的方式实现各种通信机制对应的案例</li><li>能够熟练使用ROS中的一些操作命令</li><li>能够独立完成相关实操案例</li></ul><p>案例演示:</p><p>1.话题演示案例:</p><p>控制小乌龟做圆周运动</p><p><img src="'+s+'" alt="gif"></p><p>获取乌龟位姿</p><p><img src="'+l+'" alt="gif"></p><p>2.服务演示案例:在指定位置生成乌龟</p><p><img src="'+e+'" alt="png"></p><p>3.参数演示案例:改变乌龟窗口的背景颜色</p><p><img src="'+_+'" alt="png"></p>',16)])])}const f=a(o,[["render",n]]);export{R as __pageData,f as default};
